{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mcpd","text":"<p>Run your agents, not your infrastructure.</p> <p><code>mcpd</code> is a toolchain and runtime developed by Mozilla AI that simplifies the configuration,  execution and integration of Model Context Protocol (MCP) servers with your agentic application. It is intended to provide the same experience across local, development and production environments.</p> <p>It removes the friction of cross-language server orchestration, secrets management, version pinning, and lifecycle control.</p>"},{"location":"#why-mcpd","title":"Why <code>mcpd</code>?","text":"<p>Traditional agent frameworks often embed complex subprocess logic, brittle startup scripts, and ad-hoc 'desktop style' config. </p> <p><code>mcpd</code> replaces this with:</p> <p>Zero-Config Tool Setup   No cloning repos or installing language-specific dependencies. <code>mcpd add</code> and <code>mcpd daemon</code> handle everything.</p> <p>Language-Agnostic Tooling   Use MCP servers written in Python (<code>uvx</code>), JavaScript/TypeScript (<code>npx</code>) in your code via a HTTP REST API that supports routing to MCP Servers.</p> <p>Declarative Tool Management   Define version-pinned MCP servers and tools in <code>.mcpd.toml</code>. Reproducible, consistent, and CI-friendly.</p> <p>Project config separated from runtime variables   Exportable args and environment variables per server e.g. <code>~/.config/mcpd/secrets.dev.toml</code>.  Never commit dev specific vars to Git again.</p> <p>Unified Dev Experience   One command: <code>mcpd daemon</code>. Starts and manages all servers behind the scenes.</p> <p>Intuitive SDK Integration   The Python <code>mcpd_sdk</code> makes calling tools feel like native function calls; no HTTP, STDIO, or SSE boilerplate.   Even easier for users of any-agent via <code>.agent_tools()</code>.</p> <p>Seamless Local-to-Prod Transition   The same <code>.mcpd.toml</code> and agent code work in dev, CI, and cloud environments without modification.</p>"},{"location":"#built-for-dev-infra","title":"Built for Dev &amp; Infra","text":"Feature Dev Workflow Production Benefit <code>.mcpd.toml</code> Version-controlled agent tool spec Declarative IaC for tools <code>mcpd daemon</code> Run everything locally Run in container alongside your agentic app <code>mcpd config export</code> Discover required vars Populate CI/CD pipelines Secure secrets store Local overrides per dev Injected via Control Plane Same binary Local builds Cloud deployment SDKs for Python Iterate locally Plug into prod orchestrators"},{"location":"#deploy-anywhere","title":"Deploy Anywhere","text":"<p><code>mcpd</code> is runtime-flexible and infrastructure-agnostic:</p> <ul> <li>\u2699\ufe0f Works in any container or host with <code>uv</code> and <code>npx</code></li> <li>\u2601\ufe0f Multi-cloud ready (AWS, GCP, Azure, on-prem)</li> <li>\u267b\ufe0f Low resource overhead via in-process server management</li> </ul>"},{"location":"#install","title":"\ud83d\udce6 Install","text":""},{"location":"#homebrew","title":"Homebrew","text":"<p>Add the Mozilla.ai tap:</p> <pre><code>brew tap mozilla-ai/tap\n</code></pre> <p>Then install <code>mcpd</code>:</p> <pre><code>brew install mcpd\n</code></pre> <p>Or install directly from the cask in a single command:</p> <pre><code>brew install --cask mozilla-ai/tap/mcpd\n</code></pre> <p>Installation methods</p> <p>Please see our Installation page for additional ways to install and run <code>mcpd</code>.</p>"},{"location":"#explore-the-docs","title":"\ud83d\udcda Explore the Docs","text":"<p>Use the sidebar to explore:</p> <ul> <li>\u2705 Requirements</li> <li>\u2699\ufe0f Configuration</li> <li>\ud83e\udded CLI Reference</li> <li>\ud83e\uddf5 Execution context and secrets</li> <li>\ud83d\udee0\ufe0f Makefile and tooling</li> <li>\ud83d\udcda Tutorial</li> </ul>"},{"location":"#about-mozillaai","title":"About Mozilla.ai","text":"<p>This project is built and maintained by Mozilla.ai, a mission-driven organization reimagining AI for the public good.</p> <p>Have ideas or feedback? Contributions welcome via GitHub.</p>"},{"location":"caching/","title":"Registry Caching","text":"<p><code>mcpd</code> includes a built-in caching system to improve performance when working with remote MCP server registries.  The caching system stores registry manifests locally to avoid repeated network requests.</p>"},{"location":"caching/#cache-directory","title":"Cache Directory","text":"<p>All commands that access remote registries (add and search) support optional parameters to configure caching behavior.</p> <p>You can specify the cache directory in multiple ways:</p> <ul> <li>CLI flag: <code>--cache-dir &lt;path&gt;</code></li> <li>Default: <code>~/.cache/mcpd/registries/</code></li> </ul> <p>XDG_CACHE_HOME environment variable</p> <p><code>mcpd</code> honors the XDG Base Directory Specification,  respecting the <code>XDG_CACHE_HOME</code> environment variable. This forms the base directory where <code>mcpd</code> will create a  cache folder for registry manifests.</p>"},{"location":"caching/#cache-time-to-live-ttl","title":"Cache Time-to-Live (TTL)","text":"<p>You can configure how long cached registry manifests remain valid:</p> <ul> <li>CLI flag: <code>--cache-ttl &lt;duration&gt;</code></li> <li>Default: <code>24h</code></li> </ul> <p>The duration format accepts values like:</p> <ul> <li><code>1h</code> (1 hour)</li> <li><code>30m</code> (30 minutes)</li> <li><code>24h</code> (24 hours)</li> <li><code>1h30m</code> (1 hour 30 minutes)</li> </ul>"},{"location":"caching/#caching-control","title":"Caching Control","text":""},{"location":"caching/#disabling-cache","title":"Disabling Cache","text":"<p>To disable caching entirely and always fetch fresh data:</p> <pre><code>mcpd add my-server --no-cache\nmcpd search my-query --no-cache\n</code></pre>"},{"location":"caching/#refreshing-cache","title":"Refreshing Cache","text":"<p>To force refresh cached manifests (ignoring TTL):</p> <pre><code>mcpd add my-server --refresh-cache\nmcpd search my-query --refresh-cache\n</code></pre>"},{"location":"caching/#cache-behavior","title":"Cache Behavior","text":""},{"location":"caching/#when-caching-is-enabled-default","title":"When Caching is Enabled (Default)","text":"<ol> <li>First Request: Downloads registry manifest from remote URL and stores it in the cache directory</li> <li>Subsequent Requests: Uses cached file if it exists and hasn't expired (based on TTL)</li> <li>Expired Cache: Automatically downloads fresh manifest when TTL expires</li> <li>Cache Miss: Falls back to remote URL if cache file is corrupted or missing</li> </ol>"},{"location":"caching/#when-caching-is-disabled","title":"When Caching is Disabled","text":"<ol> <li>No Directory Creation: Cache directory is never created on the filesystem</li> <li>Always Remote: All requests go directly to remote registry URLs</li> <li>No Storage: No files are written to disk</li> </ol>"},{"location":"caching/#cache-file-naming","title":"Cache File Naming","text":"<p>Cache files are stored using SHA-256 hashes of the registry URLs: <pre><code>~/.cache/mcpd/registries/\n\u251c\u2500\u2500 a1b2c3d4e5f6...1234.json  # mcpm registry manifest\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"caching/#examples","title":"Examples","text":""},{"location":"caching/#basic-usage-with-custom-cache-directory","title":"Basic Usage with Custom Cache Directory","text":"<pre><code># Use temporary cache directory\nmcpd add github-mcp --cache-dir /tmp/mcpd-cache\n\n# Set custom TTL to 1 hour\nmcpd search database --cache-ttl 1h\n</code></pre>"},{"location":"caching/#combining-cache-options","title":"Combining Cache Options","text":"<pre><code># Custom directory with forced refresh\nmcpd search api --cache-dir ./project-cache --refresh-cache\n\n# Disable caching but specify directory (directory won't be created)\nmcpd add server --no-cache --cache-dir /unused/path\n</code></pre>"},{"location":"caching/#troubleshooting","title":"Troubleshooting","text":""},{"location":"caching/#cache-issues","title":"Cache Issues","text":"<p>If you experience issues with cached data:</p> <ol> <li>Force Refresh: Use <code>--refresh-cache</code> to download fresh manifests</li> <li>Clear Cache: Delete cache directory contents manually</li> <li>Disable Temporarily: Use <code>--no-cache</code> to bypass cache entirely</li> </ol>"},{"location":"caching/#disk-space","title":"Disk Space","text":"<p>Cache files are relatively small JSON manifests (typically a few MB each), but you can:</p> <ul> <li>Set shorter TTL to reduce cache lifetime: <code>--cache-ttl 1h</code></li> <li>Use <code>--no-cache</code> for one-off operations</li> <li>Periodically clean the cache directory</li> </ul>"},{"location":"caching/#permissions","title":"Permissions","text":"<p>If cache directory creation fails, ensure:</p> <ul> <li>Parent directory is writable</li> <li>Sufficient disk space is available  </li> <li>No conflicting files exist at the cache path</li> </ul> <p>Performance</p> <p>Caching significantly improves performance for repeated operations. The default 24-hour TTL  provides a good balance between freshness and performance for most use cases.</p>"},{"location":"configuration/","title":"Project configuration","text":""},{"location":"configuration/#global-configuration","title":"Global Configuration","text":"<p>Precedence</p> <p>The order of precedence for these options is: <code>CLI flag &gt; environment variable &gt; default value</code></p>"},{"location":"configuration/#config-file-path","title":"Config File Path","text":"<p>All commands support an optional parameter to specify the location of the <code>mcpd</code> config file.</p> <p>You can provide this path in multiple ways:</p> <ul> <li>CLI flag: <code>--config-file &lt;path&gt;</code></li> <li>Environment variable: <code>MCPD_CONFIG_FILE=&lt;path&gt;</code></li> <li>Default: <code>.mcpd.toml</code> in the current working directory</li> </ul>"},{"location":"configuration/#sample-configuration-file","title":"Sample Configuration File","text":"<pre><code>[[servers]]\n  name = \"fetch\"\n  package = \"uvx::mcp-server-fetch@2025.4.7\"\n  tools = [\"fetch\"]\n\n[[servers]]\n  name = \"time\"\n  package = \"uvx::mcp-server-time@2025.8.4\"\n  tools = [\"get_current_time\", \"convert_time\"]\n</code></pre>"},{"location":"configuration/#log-level","title":"Log Level","text":"<p>Sets the logging level for <code>mcpd</code>.</p> <p>You can configure it using:</p> <ul> <li>CLI flag: <code>--log-level=&lt;level&gt;</code></li> <li>Environment variable: <code>MCPD_LOG_LEVEL=&lt;level&gt;</code></li> </ul> <p>Default:</p> <pre><code>INFO\n</code></pre>"},{"location":"configuration/#log-path","title":"Log Path","text":"<p>Sets the log file path for <code>mcpd</code>.</p> <p>Options:</p> <ul> <li>CLI flag: <code>--log-path=&lt;path&gt;</code></li> <li>Environment variable: <code>MCPD_LOG_PATH=&lt;path&gt;</code></li> </ul> <p>Setting Log Path</p> <p>Log entries will be discarded by default, unless a log path is configured.  Output intended for the terminal is still emitted.</p>"},{"location":"configuration/#hot-reload","title":"Hot Reload","text":"<p>The <code>mcpd</code> daemon supports hot-reloading of MCP server configurations without requiring a full restart. This allows you to add, remove, or modify server configurations while keeping the daemon running.</p> <p>Hot reload processes both:</p> <ul> <li>Server configuration (<code>--config-file</code>) e.g. <code>.mcpd.toml</code></li> <li>Execution context (<code>--runtime-file</code>) e.g. <code>secrets.dev.toml</code></li> </ul>"},{"location":"configuration/#sighup-signal","title":"SIGHUP Signal","text":"<p>Send a <code>SIGHUP</code> signal to the running daemon process to trigger a configuration reload:</p> <pre><code># Find the daemon process ID\nps aux | grep mcpd\n\n# Send reload signal (replace PID with actual process ID)\nkill -HUP &lt;PID&gt;\n</code></pre>"},{"location":"configuration/#reload-behavior","title":"Reload Behavior","text":"<p>During a hot reload, the daemon intelligently categorizes changes and responds accordingly:</p> Change Type Action Description Unchanged servers Preserve Servers with identical configurations keep their existing connections, tools, and health status Removed servers Stop Servers no longer in the config file are gracefully shut down New servers Start Newly added servers are initialized and connected 'Tools-Only' changes Update When only the <code>tools</code> change, the daemon updates the allowed tools without restarting the server process Configuration changes Restart Servers with other configuration changes (package version, environment variables, arguments, execution context, etc.) are stopped and restarted with new settings"},{"location":"configuration/#example-tools-only-update","title":"Example: 'Tools-Only' Update","text":"<p>Consider this server configuration:</p> <pre><code>[[servers]]\n  name = \"github\"\n  package = \"uvx::modelcontextprotocol/github-server@1.2.3\"\n  tools = [\"create_repository\", \"get_repository\"]\n</code></pre> <p>If you modify only the tools list:</p> <pre><code>[[servers]]\n  name = \"github\" \n  package = \"uvx::modelcontextprotocol/github-server@1.2.3\"\n  tools = [\"create_repository\", \"get_repository\", \"list_repositories\"] # Additional tools\n</code></pre> <p>The daemon will:</p> <ol> <li>Detect that only the <code>tools</code> array changed</li> <li>Update the allowed tools list in-place</li> <li>Keep the existing server process and connections intact</li> <li>Log a message that tools for a server were updated (including the server name and list of tools)</li> </ol>"},{"location":"configuration/#example-package-version-update","title":"Example: Package Version Update","text":"<p>If you change the package version:</p> <pre><code>[[servers]]\n  name = \"github\"\n  package = \"uvx::modelcontextprotocol/github-server@1.3.0\"  # Version changed\n  tools = [\"create_repository\", \"get_repository\", \"list_repositories\"]\n</code></pre> <p>The daemon will:</p> <ol> <li>Detect configuration changes beyond just tools</li> <li>Gracefully stop the existing server</li> <li>Start a new server with the updated configuration</li> <li>Log a message that the server is being restarted (including the server name)</li> </ol>"},{"location":"configuration/#execution-context-and-environment-variables","title":"Execution Context and Environment Variables","text":"<p>Environment Variable Visibility</p> <p>The <code>mcpd</code> process can only see environment variables that existed when it started.</p> <p>If you export new environment variables in your shell after starting <code>mcpd</code>, you must restart the daemon for those variables to become available for shell expansion.</p> <p>When the execution context file is reloaded, shell expansion of environment variables (<code>${VAR}</code> syntax)  occurs using the environment available to the running <code>mcpd</code> process when it was started.</p>"},{"location":"configuration/#what-works-during-hot-reload","title":"What Works During Hot Reload","text":"<p>Direct values are applied immediately:</p> <pre><code>[servers.jira]\n  args = [\"--confluence-token=test123\", \"--confluence-url=http://jira-test.mozilla.ai\"]\n[servers.mcp-discord.env]\n  DISCORD_TOKEN = \"qwerty123!1one\"\n</code></pre> <p>Shell expansion of existing environment variables works:</p> <pre><code>[servers.myserver]\n  args = [\"--home=${HOME}\", \"--user=${USER}\"]  # These expand to current values\n[servers.myserver.env]\n  CONFIG_PATH = \"${HOME}/.config/myapp\"  # Expands using mcpd's environment\n</code></pre>"},{"location":"configuration/#what-requires-an-mcpd-restart","title":"What Requires an <code>mcpd</code> Restart","text":"<p>New environment variables added to the system after <code>mcpd</code> started won't be visible:</p> <pre><code>[servers.myserver]\n  args = [\"--token=${NEW_TOKEN}\"]  # NEW_TOKEN added after mcpd started\n[servers.myserver.env]\n  API_KEY = \"${NEWLY_EXPORTED_VAR}\"  # Won't expand until mcpd restarts\n</code></pre>"},{"location":"configuration/#limitations","title":"Limitations","text":"<p>Hot reload does NOT apply to:</p> <ul> <li>Daemon-level config settings (timeouts, CORS, etc.)</li> <li>New environment variables added to the system</li> </ul> <p>Both require <code>mcpd</code> to be restarted for changes to take effect</p>"},{"location":"configuration/#error-handling","title":"Error Handling","text":"<p>The reload process maintains strict consistency - any error causes the daemon to exit:</p> <ul> <li>Configuration errors: Invalid configuration files or loading failures cause the daemon to exit</li> <li>Validation errors: Invalid server configurations cause the daemon to exit  </li> <li>No tools configured: If a server configuration has no tools (empty tools list or manually removed from config), the daemon will exit with an error</li> <li>Server operation failures: Any failure to start, stop, or restart a server causes the daemon to exit</li> </ul> <p>This ensures the daemon never runs in an inconsistent or partially-failed state, matching the behavior during initial startup where any server failure prevents the daemon from running.</p> <p>Reload Failures</p> <p>Unlike some systems that allow partial reloads, <code>mcpd</code> exits on any reload error to prevent inconsistent state. You'll need to fix the configuration and restart the daemon.</p>"},{"location":"configuration/#configuration-export","title":"Configuration Export","text":"<p>The <code>mcpd config export</code> command generates portable configuration files for deployment across different environments. It creates template variables using the naming pattern <code>MCPD__{SERVER_NAME}__{VARIABLE_NAME}</code>.</p>"},{"location":"configuration/#template-variable-generation","title":"Template Variable Generation","text":"<p>Environment variables and command-line arguments are both converted to template variables using the same naming scheme:</p> <ul> <li>Environment variable<code>DATABASE_URL</code> becomes <code>MCPD__{SERVER_NAME}__DATABASE_URL</code> </li> <li>Command-line argument <code>--database-url</code> becomes <code>MCPD__{SERVER_NAME}__DATABASE_URL</code></li> </ul>"},{"location":"configuration/#variable-name-collisions","title":"Variable Name Collisions","text":"<p>Naming Collisions</p> <p>If a server has both an environment variable and a command-line argument that normalize to the same name (e.g., <code>DATABASE_URL</code> and <code>--database-url</code>), they will generate the same template variable name.</p> <p>In most cases, this is intentional, the same configuration value is being used in different ways. The collision results in a single template variable that can be used for both the environment variable and command-line argument.</p>"},{"location":"configuration/#example-collision","title":"Example Collision","text":"<pre><code>[[servers]]\nname = \"example\"\nrequired_env = [\"DATABASE_URL\"]\nrequired_args = [\"--database-url\"]\n</code></pre> <p>Both will use the template variable <code>MCPD__EXAMPLE__DATABASE_URL</code> in the generated files.</p>"},{"location":"daemon-configuration/","title":"Daemon Configuration","text":""},{"location":"daemon-configuration/#global-configuration","title":"Global Configuration","text":"<p>Precedence</p> <p>The order of precedence for these options is: <code>CLI flag &gt; configuration file &gt; default value</code></p> <p>The <code>mcpd daemon</code> command supports persistent configuration through configuration files and CLI commands.  This allows you to configure API server settings, CORS policies,  and various timeout values that persist across daemon restarts.</p> <p>The daemon configuration is managed using the following commands:</p> <ul> <li><code>mcpd config daemon get [key]</code> - Retrieve configuration values</li> <li><code>mcpd config daemon set &lt;key=value&gt;</code> - Set configuration values  </li> <li><code>mcpd config daemon remove &lt;key&gt;</code> - Remove configuration values</li> <li><code>mcpd config daemon list</code> - List currently configured and all available configuration keys</li> <li><code>mcpd config daemon validate</code> - Validate current configuration</li> </ul> <p>For further information please check visit our CLI Overview.</p>"},{"location":"daemon-configuration/#configuration-structure","title":"Configuration Structure","text":"<p>The daemon configuration is organized into two main sections:</p>"},{"location":"daemon-configuration/#api-configuration-api","title":"API Configuration (<code>api.*</code>)","text":"<p>Controls the HTTP API server settings.</p> Setting Type Description Default Example <code>api.addr</code> <code>string</code> Server bind address (host:port) <code>0.0.0.0:8090</code> <code>localhost:8080</code> <code>api.timeout.shutdown</code> <code>duration</code> Graceful shutdown timeout <code>30s</code> <code>60s</code>"},{"location":"daemon-configuration/#cors-configuration-apicors","title":"CORS Configuration (<code>api.cors.*</code>)","text":"<p>Cross-Origin Resource Sharing settings for browser clients.</p> Setting Type Description Default Example <code>api.cors.enable</code> <code>bool</code> Enable CORS support <code>false</code> <code>true</code> <code>api.cors.allow_origins</code> <code>[]string</code> Allowed request origins <code>[\"*\"]</code> <code>[\"localhost:3000\", \"https://app.example.com\"]</code> <code>api.cors.allow_methods</code> <code>[]string</code> Allowed HTTP methods <code>[\"GET\", \"POST\", \"PUT\", \"DELETE\"]</code> <code>[\"GET\", \"POST\"]</code> <code>api.cors.allow_headers</code> <code>[]string</code> Allowed request headers <code>[\"Content-Type\", \"Authorization\"]</code> <code>[\"Content-Type\", \"API-Key\"]</code> <code>api.cors.expose_headers</code> <code>[]string</code> Headers exposed to client <code>[]</code> <code>[\"ETag\", \"Last-Modified\"]</code> <code>api.cors.allow_credentials</code> <code>bool</code> Allow credentials in requests <code>false</code> <code>true</code> <code>api.cors.max_age</code> <code>duration</code> Preflight cache duration <code>0s</code> <code>24h</code>"},{"location":"daemon-configuration/#mcp-configuration-mcp","title":"MCP Configuration (<code>mcp.*</code>)","text":"<p>Model Context Protocol server management settings.</p> Setting Type Description Default Example <code>mcp.timeout.init</code> <code>duration</code> Server initialization timeout <code>30s</code> <code>60s</code> <code>mcp.timeout.shutdown</code> <code>duration</code> Server shutdown timeout <code>10s</code> <code>30s</code> <code>mcp.timeout.health</code> <code>duration</code> Health check timeout <code>5s</code> <code>10s</code> <code>mcp.interval.health</code> <code>duration</code> Health check interval <code>30s</code> <code>60s</code>"},{"location":"daemon-configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"daemon-configuration/#basic-api-configuration","title":"Basic API Configuration","text":"<pre><code># Set server address\nmcpd config daemon set api.addr=\"localhost:8080\"\n\n# Configure shutdown timeout\nmcpd config daemon set api.timeout.shutdown=\"60s\"\n</code></pre>"},{"location":"daemon-configuration/#cors-configuration","title":"CORS Configuration","text":"<pre><code># Enable CORS\nmcpd config daemon set api.cors.enable=true\n\n# Set allowed origins\nmcpd config daemon set api.cors.allow_origins=\"localhost:3000,https://app.example.com\"\n\n# Allow credentials\nmcpd config daemon set api.cors.allow_credentials=true\n\n# Set preflight cache duration\nmcpd config daemon set api.cors.max_age=\"24h\"\n</code></pre>"},{"location":"daemon-configuration/#mcp-server-configuration","title":"MCP Server Configuration","text":"<pre><code># Set longer initialization timeout\nmcpd config daemon set mcp.timeout.init=\"60s\"\n\n# Configure health check frequency\nmcpd config daemon set mcp.interval.health=\"60s\"\n\n# Set health check timeout\nmcpd config daemon set mcp.timeout.health=\"10s\"\n</code></pre>"},{"location":"daemon-configuration/#retrieving-configuration","title":"Retrieving Configuration","text":"<pre><code># Get all configuration\nmcpd config daemon get\n\n# Get API configuration only\nmcpd config daemon get api\n\n# Get specific setting\nmcpd config daemon get api.cors.enable\n\n# List all configured keys\nmcpd config daemon list\n\n# List all available keys\nmcpd config daemon list --available\n</code></pre>"},{"location":"daemon-configuration/#removing-configuration","title":"Removing Configuration","text":"<pre><code># Remove a specific setting (reverts to default)\nmcpd config daemon remove api.cors.enable\n\n# Remove entire section\nmcpd config daemon remove api.cors\n\n# Remove multiple settings\nmcpd config daemon remove api.cors.enable api.cors.max_age\n</code></pre>"},{"location":"daemon-configuration/#configuration-file-storage","title":"Configuration File Storage","text":"<p>Configuration is stored in the <code>.mcpd.toml</code> file in TOML format:</p> <pre><code>[[servers]]\n  name = \"time\"\n  package = \"uvx::mcp-server-time@2025.8.4\"\n  tools = [\"get_current_time\", \"convert_time\"]\n\n[daemon]\n  [daemon.api]\n    addr = \"localhost:8080\"\n    [daemon.api.timeout]\n      shutdown = \"1m0s\"\n    [daemon.api.cors]\n      enable = true\n      allow_origins = [\"localhost:3000\", \"https://app.example.com\"]\n      allow_credentials = true\n      max_age = \"24h0m0s\"\n  [daemon.mcp]\n    [daemon.mcp.timeout]\n      shutdown = \"30s\"\n      init = \"1m0s\"\n      health = \"10s\"\n    [daemon.mcp.interval]\n      health = \"1m0s\"\n</code></pre>"},{"location":"daemon-configuration/#data-types","title":"Data Types","text":""},{"location":"daemon-configuration/#duration-format","title":"Duration Format","text":"<p>Duration values follow this time/duration format:</p> <ul> <li><code>30s</code> - 30 seconds  </li> <li><code>5m</code> - 5 minutes</li> <li><code>2h</code> - 2 hours</li> <li><code>1m30s</code> - 1 minute 30 seconds</li> </ul>"},{"location":"daemon-configuration/#string-arrays","title":"String Arrays","text":"<p>String arrays can be provided as comma-separated values: <pre><code>mcpd config daemon set api.cors.allow_origins \"localhost:3000,https://app.example.com\"\n</code></pre></p>"},{"location":"daemon-configuration/#boolean-values","title":"Boolean Values","text":"<p>Boolean values should use: <code>true</code>, <code>false</code>.</p>"},{"location":"daemon-configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Use the <code>validate</code> command to check your configuration:</p> <pre><code>mcpd config daemon validate\n</code></pre> <p>Common validation errors: - Invalid address formats (must be <code>host:port</code>) - Invalid duration formats - Invalid CORS origin URLs</p>"},{"location":"execution-context/","title":"Execution Context (Runtime) Configuration","text":""},{"location":"execution-context/#global-configuration","title":"Global Configuration","text":"<p>Precedence</p> <p>The order of precedence for these options is: <code>CLI flag &gt; environment variable &gt; default value</code></p>"},{"location":"execution-context/#runtime-file-path","title":"Runtime File Path","text":"<p>All commands support an optional parameter to specify the location of the <code>mcpd</code> runtime file which  provides the execution context.</p> <p>You can provide this path in multiple ways:</p> <ul> <li>CLI flag: <code>--runtime-file &lt;path&gt;</code></li> <li>Environment variable: <code>MCPD_RUNTIME_FILE=&lt;path&gt;</code></li> <li>Default: <code>~/.config/mcpd/secrets.dev.toml</code></li> </ul> <p>XDG_CONFIG_HOME environment variable</p> <p>mcpd honors the XDG Base Directory Specification,  respecting the <code>XDG_CONFIG_HOME</code> environment variable. This forms the base directory where <code>mcpd</code> will create an  application folder.</p> <p>The runtime file is modified using the following commands:</p> <ul> <li><code>mcpd config args set</code></li> <li><code>mcpd config env set</code></li> </ul> <p>These values apply at runtime and are separate from your project-specific <code>.mcpd.toml</code>.</p>"},{"location":"execution-context/#sample-configuration-file","title":"Sample Configuration File","text":"<pre><code>[servers]\n  [servers.fetch]\n    args = [\"--ignore-robots-txt\", \"--user-agent=mcpd/1.0.0\"]\n    [servers.fetch.env]\n      foo = \"bar\"\n  [servers.time]\n    args = [\"--local-timezone=Europe/London\"]\n    [servers.time.env]\n      baz = \"123\"\n      qwerty = \"xyz\"\n</code></pre> <p>Manual Changes</p> <p>The Execution Context Configuration file is automatically updated by <code>mcpd config</code> commands,  you shouldn't edit it by hand unless absolutely necessary.</p>"},{"location":"installation/","title":"Installing <code>mcpd</code>","text":""},{"location":"installation/#via-homebrew","title":"via Homebrew","text":"<p>Add the Mozilla.ai tap:</p> <pre><code>brew tap mozilla-ai/tap\n</code></pre> <p>Then install <code>mcpd</code>:</p> <pre><code>brew install mcpd\n</code></pre> <p>Or install directly from the cask:</p> <pre><code>brew install --cask mozilla-ai/tap/mcpd\n</code></pre>"},{"location":"installation/#via-github-releases","title":"via GitHub releases","text":"<p>Official releases can be found on the mcpd GitHub releases page.</p> <p>The following is an example of manually downloading and installing <code>mcpd</code> using <code>curl</code> and <code>jq</code> by running <code>install_mcpd</code>:</p> <pre><code>function install_mcpd() {\n    command -v curl &gt;/dev/null || { echo \"curl not found\"; return 1; }\n    command -v jq &gt;/dev/null || { echo \"jq not found\"; return 1; }\n\n    latest_version=$(curl -s https://api.github.com/repos/mozilla-ai/mcpd/releases/latest | jq -r .tag_name)\n    os=$(uname)\n    arch=$(uname -m)\n\n    zip_name=\"mcpd_${os}_${arch}.tar.gz\"\n    url=\"https://github.com/mozilla-ai/mcpd/releases/download/${latest_version}/${zip_name}\"\n\n    echo \"Downloading: $url\"\n    curl -sSL \"$url\" -o \"$zip_name\" || { echo \"Download failed\"; return 1; }\n\n    echo \"Extracting: $zip_name\"\n    tar -xzf \"$zip_name\" mcpd || { echo \"Extraction failed\"; return 1; }\n\n    echo \"Installing to /usr/local/bin\"\n    sudo mv mcpd /usr/local/bin/mcpd &amp;&amp; sudo chmod +x /usr/local/bin/mcpd || { echo \"Install failed\"; return 1; }\n\n    rm -f \"$zip_name\"\n    echo \"mcpd installed successfully\"\n}\n</code></pre> <p>macOS Gatekeeper quarantine</p> <p>If you're on macOS, remove the quarantine flag before running <code>mcpd</code>: <pre><code>xattr -d com.apple.quarantine mcpd\n</code></pre></p>"},{"location":"installation/#via-local-go-binary-build","title":"via local Go binary build","text":"<pre><code># Clone the Git repo\ngit clone git@github.com:mozilla-ai/mcpd.git\ncd mcpd\n# Checkout a specific tag (or build latest main)\ngit fetch --tags\ngit checkout v0.0.5\n# Use Makefile commands to build and install mcpd\nmake build\nsudo make install # Installs mcpd 'globally' to /usr/local/bin\n</code></pre>"},{"location":"installation/#run-with-docker","title":"Run with Docker","text":"<p><code>mcpd</code> is available as the Docker image mzdotai/mcpd.</p> <p>Dockerfile environment variables</p> <p>The Dockerfile defines sensible defaults for configuration via environment variables. These can be overridden at runtime using <code>docker run -e KEY=VALUE</code>.</p>"},{"location":"installation/#default-environment-variables","title":"Default environment variables","text":"Name Default Value <code>MCPD_API_PORT</code> <code>8090</code> <code>MCPD_LOG_LEVEL</code> <code>info</code> <code>MCPD_LOG_PATH</code> <code>/var/log/mcpd/mcpd.log</code> <code>MCPD_CONFIG_FILE</code> <code>/etc/mcpd/.mcpd.toml</code> <code>MCPD_RUNTIME_FILE</code> <code>/home/mcpd/.config/mcpd/secrets.prd.toml</code> <p>To run <code>mcpd</code> with Docker, map the required port and bind mount your <code>.mcpd.toml</code> configuration file and runtime secrets file:</p> <pre><code>docker run  -p 8090:8090 \\\n            -v $PWD/.mcpd.toml:/etc/mcpd/.mcpd.toml \\\n            -v $HOME/.config/mcpd/secrets.dev.toml:/home/mcpd/.config/mcpd/secrets.prd.toml \\\n            -e MCPD_LOG_LEVEL=debug \\\n            mzdotai/mcpd:v0.0.5\n</code></pre>"},{"location":"installation/#running-docker-based-mcp-servers-from-containerized-mcpd","title":"Running Docker-based MCP servers from containerized <code>mcpd</code>","text":"<p>If your MCP servers use the Docker runtime, mount the host's Docker socket to allow mcpd to manage containers on the host:</p> <pre><code>docker run  -p 8090:8090 \\\n            -v /var/run/docker.sock:/var/run/docker.sock \\\n            -v $PWD/.mcpd.toml:/etc/mcpd/.mcpd.toml \\\n            -v $HOME/.config/mcpd/secrets.dev.toml:/home/mcpd/.config/mcpd/secrets.prd.toml \\\n            -e MCPD_LOG_LEVEL=debug \\\n            mzdotai/mcpd:v0.0.5\n</code></pre> <p>Security Note</p> <p>Mounting the Docker socket grants the container full access to the host's Docker daemon. Only use this with trusted images.</p>"},{"location":"makefile/","title":"Makefile Usage","text":"<p>The <code>mcpd</code> project includes a <code>Makefile</code> to streamline common developer tasks. </p> <p>Running make</p> <p>All commands should be run from the root of the repository.</p>"},{"location":"makefile/#commands","title":"Commands","text":"<p>Environment</p> <p>Most commands assume you have Go installed and available in your <code>PATH</code>.</p>"},{"location":"makefile/#build","title":"\ud83e\uddf1 Build","text":"<ul> <li> <p>Build the binary <pre><code>make build\n</code></pre></p> <p>Architectures and Operating Systems</p> <p>You can explicitly build the binary for a different architecture (<code>amd64/arm64</code>) or operating systems with:</p> <ul> <li><code>make build-linux</code></li> <li><code>make build-linux-arm64</code></li> </ul> </li> <li> <p>Remove the compiled binary from the working directory <pre><code>make clean\n</code></pre></p> </li> <li> <p>Install the binary to your system (typically <code>/usr/local/bin</code>) <pre><code>sudo make install\n</code></pre></p> <p>Dependency</p> <p>The <code>install</code> target relies on the standard <code>build</code> target.</p> </li> <li> <p>Uninstall the binary <pre><code>sudo make uninstall\n</code></pre></p> </li> </ul>"},{"location":"makefile/#test","title":"\ud83e\uddea Test","text":"<ul> <li>Run all Go tests <pre><code>make test\n</code></pre></li> </ul>"},{"location":"makefile/#validation","title":"\u2705 Validation","text":"<ul> <li> <p>Run linter with auto-fix <pre><code>make lint\n</code></pre></p> </li> <li> <p>Validate Mozilla AI registry against JSON schema <pre><code>make validate-registry\n</code></pre></p> <p>When to use</p> <p>Run this command before submitting PRs that modify:</p> <ul> <li><code>internal/provider/mozilla_ai/data/registry.json</code></li> <li><code>internal/provider/mozilla_ai/data/schema.json</code></li> </ul> </li> </ul>"},{"location":"makefile/#license-and-attribution","title":"\ud83d\udcdc License and Attribution","text":"<ul> <li> <p>Check dependency licenses <pre><code>make check-licenses\n</code></pre></p> <p>Allowed licenses</p> <p>This validates that all dependencies use one of: <code>Apache-2.0</code>, <code>MIT</code>, <code>BSD-2-Clause</code>, <code>BSD-3-Clause</code>, <code>ZeroBSD</code>, or <code>Unlicense</code>.</p> </li> <li> <p>Check NOTICE file is up to date <pre><code>make check-notice\n</code></pre></p> </li> <li> <p>Generate NOTICE file <pre><code>make notice\n</code></pre></p> <p>Third-party attribution</p> <p>Regenerates the NOTICE file with current dependency license information.</p> </li> </ul>"},{"location":"makefile/#run","title":"\ud83d\udc33 Run","text":"<ul> <li> <p>Start <code>mcpd</code> in a container <pre><code>make local-up\n</code></pre></p> <p>Default files</p> <p>By default the following files will be mounted to the container:</p> <ul> <li><code>.mcpd.toml</code> - the project configuration file in this repository</li> <li><code>~/.config/mcpd/secrets.dev.toml</code> - the default location for runtime configuration</li> </ul> </li> <li> <p>Stop mcpd <pre><code>make local-down\n</code></pre></p> </li> </ul>"},{"location":"makefile/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>These commands manage the MkDocs developer documentation site for <code>mcpd</code>.</p> <p>Environment</p> <p>Docs commands assume you have <code>uv</code> installed and available in your <code>PATH</code> (in additon to Go).</p> <ul> <li> <p>Generate CLI reference docs from the Cobra commands <pre><code>make docs-cli\n</code></pre></p> </li> <li> <p>Update <code>mkdocs.yaml</code> navigation for the CLI commands <pre><code>make docs-nav\n</code></pre></p> </li> <li> <p>Serve the docs locally using MkDocs + uv: generate CLI docs, update nav, serve locally <pre><code>make docs\n</code></pre></p> <p>First time?</p> <p>The <code>docs</code> command will create a virtual environment using <code>uv</code>, install MkDocs + Material theme, and start the local server at http://localhost:8000/mcpd/.</p> </li> </ul>"},{"location":"makefile/#target-reference","title":"\ud83e\udded Target Reference","text":"<p>Here's a complete list of Makefile targets:</p> Target Description <code>build</code> Compile the Go binary <code>build-dev</code> Compile the Go binary for development (no optimizations) <code>build-linux</code> Compile the Go binary for Linux on amd64 <code>build-linux-arm64</code> Compile the Go binary for Linux on arm64 <code>check-licenses</code> Validate all dependency licenses are allowed <code>check-notice</code> Verify NOTICE file is up to date <code>clean</code> Remove compiled binary from working directory <code>docs</code> Serve docs locally via <code>mkdocs serve</code> <code>docs-local</code> Serve docs locally via <code>mkdocs serve</code> <code>docs-nav</code> Update CLI doc nav in <code>mkdocs.yaml</code> <code>install</code> Install binary to system path <code>lint</code> Run linter with auto-fix (includes check-notice) <code>local-down</code> Stop a running <code>mcpd</code> Docker container <code>local-up</code> Start <code>mcpd</code> in a Docker container <code>notice</code> Generate NOTICE file with dependency licenses <code>test</code> Run all Go tests (includes lint) <code>uninstall</code> Remove installed binary <code>validate-registry</code> Validate Mozilla AI registry JSON schema"},{"location":"plugin-configuration/","title":"Plugin Configuration","text":""},{"location":"plugin-configuration/#overview","title":"Overview","text":"<p>The <code>mcpd</code> daemon supports a plugin subsystem for extending request/response processing.</p>"},{"location":"plugin-configuration/#plugin-categories","title":"Plugin Categories","text":"<p>Info</p> <p>Within each category, plugins execute in the order they appear in the configuration file.</p> <p>Plugins are organized into categories and execute during specific phases of the request lifecycle.</p> <p>Categories execute in the order shown below for both request and response phases.</p> Order Category Purpose Execution 1 <code>observability</code> Collect metrics and traces (non-blocking) Parallel 2 <code>authentication</code> Validate client identity Sequential 3 <code>authorization</code> Verify permissions after authentication Sequential 4 <code>rate_limiting</code> Enforce request rate limits Sequential 5 <code>validation</code> Check request/response structure and content Sequential 6 <code>content</code> Transform request/response payloads Sequential 7 <code>audit</code> Log compliance and security events Sequential"},{"location":"plugin-configuration/#plugin-execution-flows","title":"Plugin Execution Flows","text":"<p>Plugins can execute during one or both flows/phases:</p> <ul> <li><code>request</code>: Executes during the request phase</li> <li><code>response</code>: Executes during the response phase</li> </ul>"},{"location":"plugin-configuration/#configuration-format","title":"Configuration Format","text":"<pre><code>[[servers]]\n  name = \"api-server\"\n  package = \"uvx::api-server@1.0.0\"\n  tools = [\"create\", \"read\", \"update\", \"delete\"]\n\n[[plugins.authentication]]\n  name = \"jwt-auth\"\n  commit_hash = \"abc123\"\n  required = true\n  flows = [\"request\"]\n\n[[plugins.authentication]]\n  name = \"api-key-auth\"\n  flows = [\"request\", \"response\"]\n\n[[plugins.authorization]]\n  name = \"rbac\"\n  required = true\n  flows = [\"request\"]\n\n[[plugins.observability]]\n  name = \"metrics\"\n  flows = [\"request\", \"response\"]\n</code></pre>"},{"location":"plugin-configuration/#plugin-fields","title":"Plugin Fields","text":"Field Type Required Description <code>name</code> string Yes Name of the plugin binary in the plugins directory <code>commit_hash</code> string No SHA/hash for validating plugin version <code>required</code> boolean No Whether plugin failure should block the request <code>flows</code> array Yes Execution phases: [\"request\"], [\"response\"], or both"},{"location":"plugin-configuration/#execution-order","title":"Execution Order","text":"<p>Plugins execute in the order they appear in the configuration file within their category.</p> <pre><code>[[plugins.authentication]]\n  name = \"jwt-auth\"\n  flows = [\"request\"]\n\n[[plugins.authentication]]\n  name = \"api-key-auth\"\n  flows = [\"request\"]\n</code></pre> <p>During the request phase, <code>jwt-auth</code> executes first, followed by <code>api-key-auth</code>.</p>"},{"location":"plugin-configuration/#required-plugins","title":"Required Plugins","text":"<p>Required Plugin Failures</p> <p>If a required (serial) plugin fails or rejects a request/response, the overall request is rejected immediately.</p> <p>Mark plugins as required when their successful execution is critical:</p> <pre><code>[[plugins.authentication]]\n  name = \"jwt-auth\"\n  required = true\n  flows = [\"request\"]\n</code></pre> <p>When <code>required</code> is not specified or set to <code>false</code>, plugin failures are logged but do not block the request.</p>"},{"location":"plugin-configuration/#content-mutation","title":"Content Mutation","text":"<p>Content Plugin Behavior</p> <p>Only plugins in the <code>content</code> category may mutate requests or responses. Modified content is passed to the next plugin in the chain.</p> <p>Content plugins modify the request by setting the modified request in their response. Other plugin categories can only observe or reject requests.</p>"},{"location":"plugin-configuration/#example-content-plugin-flow","title":"Example Content Plugin Flow","text":"<pre><code>[[plugins.content]]\n  name = \"encryption\"\n  flows = [\"request\"]\n\n[[plugins.content]]\n  name = \"compression\"\n  flows = [\"request\"]\n</code></pre> <p>The <code>encryption</code> plugin processes the request first and may modify it. The modified request is then passed to the <code>compression</code> plugin.</p>"},{"location":"plugin-configuration/#observability-plugin-execution","title":"Observability Plugin Execution","text":"<p>Parallel Execution</p> <p>Observability plugins run in parallel and cannot modify requests or responses.</p> <p>Observability plugins are designed for metrics collection, tracing, and monitoring. They execute concurrently for performance.</p>"},{"location":"plugin-configuration/#required-observability-plugins","title":"Required Observability Plugins","text":"<p>If any observability plugin is marked as <code>required</code>, request processing waits for all observability plugins to complete before aggregating results.  If any required observability plugin fails, the request is rejected after all have completed.</p> <pre><code>[[plugins.observability]]\n  name = \"metrics\"\n  required = true\n  flows = [\"request\", \"response\"]\n\n[[plugins.observability]]\n  name = \"tracing\"\n  flows = [\"request\", \"response\"]\n</code></pre> <p>In this example, both <code>metrics</code> and <code>tracing</code> run in parallel, but the request will be rejected if <code>metrics</code> fails  (once <code>metrics</code> and <code>tracing</code> have completed).</p>"},{"location":"plugin-configuration/#multiple-plugins-per-category","title":"Multiple Plugins Per Category","text":"<p>You can configure multiple plugins within the same category. They execute in the order defined:</p> <pre><code>[[plugins.authentication]]\n  name = \"jwt-auth\"\n  required = true\n  flows = [\"request\"]\n\n[[plugins.authentication]]\n  name = \"api-key-auth\"\n  flows = [\"request\"]\n\n[[plugins.authentication]]\n  name = \"oauth2\"\n  flows = [\"request\"]\n</code></pre> <p>Request processing order: <code>jwt-auth</code> \u2192 <code>api-key-auth</code> \u2192 <code>oauth2</code></p>"},{"location":"plugin-configuration/#minimal-configuration","title":"Minimal Configuration","text":"<p>Plugins are optional. A configuration file without plugins is valid:</p> <pre><code>[[servers]]\n  name = \"simple-server\"\n  package = \"uvx::simple@1.2.3\"\n  tools = [\"tool1\"]\n</code></pre>"},{"location":"plugin-configuration/#complete-example","title":"Complete Example","text":"<pre><code>[[servers]]\n  name = \"production-api\"\n  package = \"uvx::api-server@2.0.0\"\n  tools = [\"create_user\", \"get_user\", \"update_user\", \"delete_user\"]\n\n[[plugins.authentication]]\n  name = \"jwt-auth\"\n  commit_hash = \"a1b2c3d4\"\n  required = true\n  flows = [\"request\"]\n\n[[plugins.authorization]]\n  name = \"rbac\"\n  commit_hash = \"e5f6g7h8\"\n  required = true\n  flows = [\"request\"]\n\n[[plugins.rate_limiting]]\n  name = \"token-bucket\"\n  flows = [\"request\"]\n\n[[plugins.validation]]\n  name = \"schema-validator\"\n  required = true\n  flows = [\"request\", \"response\"]\n\n[[plugins.content]]\n  name = \"encryption\"\n  flows = [\"request\", \"response\"]\n\n[[plugins.observability]]\n  name = \"prometheus-metrics\"\n  required = true\n  flows = [\"request\", \"response\"]\n\n[[plugins.observability]]\n  name = \"distributed-tracing\"\n  flows = [\"request\", \"response\"]\n\n[[plugins.audit]]\n  name = \"compliance-logger\"\n  required = true\n  flows = [\"response\"]\n</code></pre>"},{"location":"plugin-configuration/#execution-flow","title":"Execution Flow","text":""},{"location":"plugin-configuration/#request-phase","title":"Request Phase","text":"<ol> <li><code>jwt-auth</code> (authentication) - sequential</li> <li><code>rbac</code> (authorization) - sequential</li> <li><code>token-bucket</code> (rate_limiting) - sequential</li> <li><code>schema-validator</code> (validation) - sequential</li> <li><code>encryption</code> (content) - sequential</li> <li><code>prometheus-metrics</code> + <code>distributed-tracing</code> (observability) - parallel</li> </ol>"},{"location":"plugin-configuration/#response-phase","title":"Response Phase","text":"<ol> <li><code>schema-validator</code> (validation) - sequential</li> <li><code>encryption</code> (content) - sequential</li> <li><code>prometheus-metrics</code> + <code>distributed-tracing</code> (observability) - parallel</li> <li><code>compliance-logger</code> (audit) - sequential</li> </ol>"},{"location":"plugin-configuration/#validation","title":"Validation","text":"<p>Plugin configurations are validated when the daemon starts or during hot reload. Common validation errors:</p> <ul> <li>Empty plugin name</li> <li>Missing or empty <code>flows</code> array</li> <li>Invalid flow values (must be <code>request</code> or <code>response</code>)</li> <li>Duplicate flow values</li> </ul>"},{"location":"requirements/","title":"Requirements","text":"<p>To use <code>mcpd</code>, ensure the following tools are installed:</p> Tool Purpose URL <code>Docker</code> For running MCP servers as Docker containers https://www.docker.com/products/docker-desktop/ <code>Go &gt;= 1.25.0</code> Required for building <code>mcpd</code> and running tests https://go.dev/doc/install <code>uv</code> For running <code>uvx</code> Python packages in <code>mcpd</code>, and local docs https://docs.astral.sh/uv/getting-started/installation/ <code>npx</code> For running JavaScript/TypeScript packages in <code>mcpd</code> https://docs.npmjs.com/downloading-and-installing-node-js-and-npm <p>Internet Connectivity</p> <p><code>mcpd</code> requires internet access to contact package registries and to allow MCP servers access to the internet if required when running.</p>"},{"location":"tutorial/","title":"Basic Tutorial","text":"<p>This tutorial walks you through using <code>mcpd</code> from setup to making requests to a running MCP server.</p>"},{"location":"tutorial/#1-install-mcpd-via-homebrew","title":"1. Install <code>mcpd</code> via Homebrew","text":"<pre><code>brew tap mozilla-ai/tap\nbrew install mcpd\n</code></pre> <p>Installation methods</p> <p>Please see our Installation page for additional ways to install and run <code>mcpd</code>.</p>"},{"location":"tutorial/#2-initialize-the-project","title":"2. Initialize the Project","text":"<pre><code>mcpd init\n</code></pre> <p>Config File Location</p> <p>This creates an <code>.mcpd.toml</code> file in your current directory.</p>"},{"location":"tutorial/#3-add-an-mcp-server","title":"3. Add an MCP Server","text":"<p>Add the latest version of the <code>time</code> server: <pre><code>mcpd add time\n</code></pre></p> <p>You can also restrict access to allow only specific tools: <pre><code>mcpd add time --tool get_current_time\n</code></pre></p> <p>Experiment with MCP servers</p> <p>You can quickly experiment with MCP servers before properly adding them to the <code>mcpd</code> configuration, by running the inspector tool: <pre><code>mcpd inspector\n</code></pre> For more information, please refer to the official documentation of the tool.</p>"},{"location":"tutorial/#4-set-startup-arguments","title":"4. Set Startup Arguments","text":"<p>Configure any startup flags for the server, in this case <code>--local-timezone</code> is optional, but let's set it: <pre><code>mcpd config args set time -- --local-timezone=Europe/London\n</code></pre></p>"},{"location":"tutorial/#5-start-the-daemon","title":"5. Start the Daemon","text":"<p>Start <code>mcpd</code>, which launches MCP servers and exposes the HTTP API: <pre><code>mcpd daemon\n</code></pre></p> <p>API Endpoint</p> <p>The API docs will be available at <code>http://localhost:8090/docs</code></p>"},{"location":"tutorial/#6-query-running-servers","title":"6. Query Running Servers","text":"<p>List all running servers: <pre><code>curl -s http://localhost:8090/api/v1/servers | jq\n</code></pre></p>"},{"location":"tutorial/#7-call-a-tool-on-a-server","title":"7. Call a Tool on a Server","text":"<p>Make a request to a tool on a specific MCP server: <pre><code>curl -s -X POST -H \"Content-Type: application/json\" \\\n     -d '{\"timezone\": \"America/New_York\"}' \\\n     http://localhost:8090/api/v1/servers/time/tools/get_current_time | jq\n</code></pre></p>"},{"location":"tutorial/#8-use-mcpd-in-your-agentic-python-application","title":"8. Use <code>mcpd</code> in your Agentic Python application","text":"<p>For examples on using <code>mcpd</code> with agents in Python, please refer to the Python SDK documentation.</p>"},{"location":"commands/mcpd/","title":"Overview","text":""},{"location":"commands/mcpd/#mcpd","title":"mcpd","text":"<p><code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></p>"},{"location":"commands/mcpd/#synopsis","title":"Synopsis","text":"<p>The <code>mcpd</code> CLI is the primary interface for developers to interact with <code>mcpd</code> define their agent projects, and manage MCP server dependencies</p>"},{"location":"commands/mcpd/#options","title":"Options","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd add    - Adds an MCP server dependency to the project</li> <li>mcpd config  - Manages configuration for MCP servers</li> <li>mcpd daemon  - Launches an <code>mcpd</code> daemon instance</li> <li>mcpd init  - Initializes the current directory as an <code>mcpd</code> project</li> <li>mcpd inspector    - Start the MCP inspector tool</li> <li>mcpd remove  - Removes an MCP server dependency from the project</li> <li>mcpd search  - Searches all configured registries for matching MCP servers</li> </ul>"},{"location":"commands/mcpd/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_add/","title":"add","text":""},{"location":"commands/mcpd_add/#mcpd-add","title":"mcpd add","text":"<p>Adds an MCP server dependency to the project</p>"},{"location":"commands/mcpd_add/#synopsis","title":"Synopsis","text":"<p>Adds an MCP server dependency to the project. <code>mcpd</code> will search the registry for the named server and attempt to return information on the version specified, or 'latest' if no version specified</p> <pre><code>mcpd add &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_add/#options","title":"Options","text":"<pre><code>      --allow-deprecated   Optional, allows server installations marked as deprecated to be added\n      --cache-dir string   Directory for caching registry manifests (default \"/home/runner/.cache/mcpd/registries\")\n      --cache-ttl string   Time-to-live for cached registry manifests (e.g. 1h, 30m, 24h) (default \"24h\")\n      --format format      Specify the output format (one of: json, text, yaml) (default text)\n      --no-cache           Disable registry manifest caching\n      --refresh-cache      Force refresh of cached registry manifests\n      --runtime string     Optional, specify the runtime of the server (e.g. uvx, npx)\n      --source string      Optional, specify the source registry of the server (e.g. mozilla-ai)\n      --tool stringArray   Optional, when specified limits the available tools on the server (can be repeated)\n      --version string     Specify the version of the server package\n</code></pre>"},{"location":"commands/mcpd_add/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_add/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_add/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config/","title":"config","text":""},{"location":"commands/mcpd_config/#mcpd-config","title":"mcpd config","text":"<p>Manages configuration for MCP servers</p>"},{"location":"commands/mcpd_config/#synopsis","title":"Synopsis","text":"<p>Manages configuration for MCP servers, dealing with environment variables, command line args and exporting config</p>"},{"location":"commands/mcpd_config/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> <li>mcpd config args    - Manages MCP server command line args configuration</li> <li>mcpd config daemon    - Manages daemon configuration</li> <li>mcpd config env  - Manages environment variable configuration for MCP servers</li> <li>mcpd config export    - Exports current configuration, generating a pair of safe and portable configuration files</li> <li>mcpd config tools  - Manages tools configuration for a registered MCP server</li> </ul>"},{"location":"commands/mcpd_config/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_args/","title":"config args","text":""},{"location":"commands/mcpd_config_args/#mcpd-config-args","title":"mcpd config args","text":"<p>Manages MCP server command line args configuration</p>"},{"location":"commands/mcpd_config_args/#synopsis","title":"Synopsis","text":"<p>Manages MCP server command line args configuration, dealing with setting, removing, clearing and listing configuration</p>"},{"location":"commands/mcpd_config_args/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_args/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config  - Manages configuration for MCP servers</li> <li>mcpd config args clear    - Clears configured command line arguments for an MCP server</li> <li>mcpd config args list  - Lists the configured command line arguments for a specific MCP server</li> <li>mcpd config args remove  - Remove arguments from an MCP server's configuration</li> <li>mcpd config args set    - Set or replace startup command line arguments for an MCP server</li> </ul>"},{"location":"commands/mcpd_config_args/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_args_clear/","title":"config args clear","text":""},{"location":"commands/mcpd_config_args_clear/#mcpd-config-args-clear","title":"mcpd config args clear","text":"<p>Clears configured command line arguments for an MCP server</p>"},{"location":"commands/mcpd_config_args_clear/#synopsis","title":"Synopsis","text":"<p>Clears configured command line arguments for an MCP server, from the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config args clear &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_args_clear/#options","title":"Options","text":"<pre><code>      --force   Force clearing of all command line arguments for the specified server without confirmation\n</code></pre>"},{"location":"commands/mcpd_config_args_clear/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_args_clear/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config args    - Manages MCP server command line args configuration</li> </ul>"},{"location":"commands/mcpd_config_args_clear/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_args_list/","title":"config args list","text":""},{"location":"commands/mcpd_config_args_list/#mcpd-config-args-list","title":"mcpd config args list","text":"<p>Lists the configured command line arguments for a specific MCP server</p>"},{"location":"commands/mcpd_config_args_list/#synopsis","title":"Synopsis","text":"<p>Lists the configured command line arguments for a specific MCP server, using the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config args list &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_args_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_args_list/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config args    - Manages MCP server command line args configuration</li> </ul>"},{"location":"commands/mcpd_config_args_list/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_args_remove/","title":"config args remove","text":""},{"location":"commands/mcpd_config_args_remove/#mcpd-config-args-remove","title":"mcpd config args remove","text":"<p>Remove arguments from an MCP server's configuration</p>"},{"location":"commands/mcpd_config_args_remove/#synopsis","title":"Synopsis","text":"<p>Remove arguments from a specified MCP server in the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>).</p> <p>This command removes ALL occurrences of each specified argument, whether they are:   - Flags (e.g., --verbose, -v)   - Flags with values (e.g., --config=file.json)   - Positional arguments (e.g., /path/to/file)</p> <p>Matching behavior:   - Specifying '--verbose' removes ALL '--verbose' variants (--verbose, --verbose=true, etc.)   - Specifying '--port=8080' removes ONLY exact matches of '--port=8080'   - If an argument appears multiple times, all instances are removed</p> <pre><code>mcpd config args remove &lt;server-name&gt; -- [arg ...] [--arg ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_args_remove/#examples","title":"Examples","text":"<pre><code>remove time -- --local-timezone\n</code></pre>"},{"location":"commands/mcpd_config_args_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_args_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config args    - Manages MCP server command line args configuration</li> </ul>"},{"location":"commands/mcpd_config_args_remove/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_args_set/","title":"config args set","text":""},{"location":"commands/mcpd_config_args_set/#mcpd-config-args-set","title":"mcpd config args set","text":"<p>Set or replace startup command line arguments for an MCP server</p>"},{"location":"commands/mcpd_config_args_set/#synopsis","title":"Synopsis","text":"<p>Set startup command line arguments for an MCP server in the runtime context  configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>).</p> <p>By default, this command completely replaces all existing arguments with the new ones provided.</p> <p>Use the --merge-flags option to preserve existing flags while updating: it replaces all positional  arguments with the new ones and merges flags (new flags override existing ones,  non-conflicting flags are preserved).</p> <pre><code>mcpd config args set &lt;server-name&gt; -- [positional-args...] [--flag=value...] [--bool-flag...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_args_set/#options","title":"Options","text":"<pre><code>      --merge-flags   Replace positional args but merge flags (new flags override, others preserved)\n</code></pre>"},{"location":"commands/mcpd_config_args_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_args_set/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config args    - Manages MCP server command line args configuration</li> </ul>"},{"location":"commands/mcpd_config_args_set/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon/","title":"config daemon","text":""},{"location":"commands/mcpd_config_daemon/#mcpd-config-daemon","title":"mcpd config daemon","text":"<p>Manages daemon configuration</p>"},{"location":"commands/mcpd_config_daemon/#synopsis","title":"Synopsis","text":"<p>Manages daemon configuration in .mcpd.toml including API settings, CORS, timeouts and intervals</p>"},{"location":"commands/mcpd_config_daemon/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config  - Manages configuration for MCP servers</li> <li>mcpd config daemon get    - Get daemon configuration value</li> <li>mcpd config daemon list  - List daemon configuration</li> <li>mcpd config daemon remove  - Remove daemon configuration values</li> <li>mcpd config daemon set    - Set daemon configuration values</li> <li>mcpd config daemon validate  - Validate daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon_get/","title":"config daemon get","text":""},{"location":"commands/mcpd_config_daemon_get/#mcpd-config-daemon-get","title":"mcpd config daemon get","text":"<p>Get daemon configuration value</p>"},{"location":"commands/mcpd_config_daemon_get/#synopsis","title":"Synopsis","text":"<p>Get a specific daemon configuration value from .mcpd.toml file using dotted key notation.</p> <p>Examples:   mcpd config daemon get api.addr   mcpd config daemon get api.cors.enable   mcpd config daemon get mcp.timeout.health</p> <pre><code>mcpd config daemon get &lt;key&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_daemon_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon_get/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config daemon    - Manages daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon_get/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon_list/","title":"config daemon list","text":""},{"location":"commands/mcpd_config_daemon_list/#mcpd-config-daemon-list","title":"mcpd config daemon list","text":"<p>List daemon configuration</p>"},{"location":"commands/mcpd_config_daemon_list/#synopsis","title":"Synopsis","text":"<p>List daemon configuration from .mcpd.toml file.</p> <p>Examples:   mcpd config daemon list                # Show current configuration   mcpd config daemon list --available   # Show all available configuration keys</p> <pre><code>mcpd config daemon list [flags]\n</code></pre>"},{"location":"commands/mcpd_config_daemon_list/#options","title":"Options","text":"<pre><code>      --available   Show all available configuration keys with descriptions\n</code></pre>"},{"location":"commands/mcpd_config_daemon_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon_list/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config daemon    - Manages daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon_list/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon_remove/","title":"config daemon remove","text":""},{"location":"commands/mcpd_config_daemon_remove/#mcpd-config-daemon-remove","title":"mcpd config daemon remove","text":"<p>Remove daemon configuration values</p>"},{"location":"commands/mcpd_config_daemon_remove/#synopsis","title":"Synopsis","text":"<p>Remove specific daemon configuration values from .mcpd.toml file using dotted key notation.</p> <p>Examples:   mcpd config daemon remove api.addr   mcpd config daemon remove api.cors.enable api.cors.allow_origins   mcpd config daemon remove mcp.timeout.health</p> <pre><code>mcpd config daemon remove &lt;key&gt; [key ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_daemon_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config daemon    - Manages daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon_remove/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon_set/","title":"config daemon set","text":""},{"location":"commands/mcpd_config_daemon_set/#mcpd-config-daemon-set","title":"mcpd config daemon set","text":"<p>Set daemon configuration values</p>"},{"location":"commands/mcpd_config_daemon_set/#synopsis","title":"Synopsis","text":"<p>Set daemon configuration values in .mcpd.toml file using dotted key notation.</p> <p>Examples:   mcpd config daemon set api.addr=\"0.0.0.0:9090\"   mcpd config daemon set api.timeout.shutdown=\"30s\" mcp.interval.health=\"10s\"   mcpd config daemon set api.cors.enable=true api.cors.allow_origins=\"localhost:3000,app.example.com\"</p> <pre><code>mcpd config daemon set &lt;key=value&gt; [key=value ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_daemon_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon_set/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config daemon    - Manages daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon_set/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_daemon_validate/","title":"config daemon validate","text":""},{"location":"commands/mcpd_config_daemon_validate/#mcpd-config-daemon-validate","title":"mcpd config daemon validate","text":"<p>Validate daemon configuration</p>"},{"location":"commands/mcpd_config_daemon_validate/#synopsis","title":"Synopsis","text":"<p>Validate daemon configuration in .mcpd.toml file</p> <pre><code>mcpd config daemon validate [flags]\n</code></pre>"},{"location":"commands/mcpd_config_daemon_validate/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_daemon_validate/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config daemon    - Manages daemon configuration</li> </ul>"},{"location":"commands/mcpd_config_daemon_validate/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_env/","title":"config env","text":""},{"location":"commands/mcpd_config_env/#mcpd-config-env","title":"mcpd config env","text":"<p>Manages environment variable configuration for MCP servers</p>"},{"location":"commands/mcpd_config_env/#synopsis","title":"Synopsis","text":"<p>Manages environment variable configuration for MCP servers, dealing with setting, removing, clearing and listing configuration</p>"},{"location":"commands/mcpd_config_env/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_env/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config  - Manages configuration for MCP servers</li> <li>mcpd config env clear  - Clears configured environment variables for an MCP server</li> <li>mcpd config env list    - Lists configured environment variables for a specific MCP server</li> <li>mcpd config env remove    - Remove environment variables for an MCP server</li> <li>mcpd config env set  - Set or update environment variables for an MCP server</li> </ul>"},{"location":"commands/mcpd_config_env/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_env_clear/","title":"config env clear","text":""},{"location":"commands/mcpd_config_env_clear/#mcpd-config-env-clear","title":"mcpd config env clear","text":"<p>Clears configured environment variables for an MCP server</p>"},{"location":"commands/mcpd_config_env_clear/#synopsis","title":"Synopsis","text":"<p>Clears environment variables for a specified MCP server from the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config env clear &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_env_clear/#options","title":"Options","text":"<pre><code>      --force   Force clearing of all environment variables for the specified server without confirmation\n</code></pre>"},{"location":"commands/mcpd_config_env_clear/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_env_clear/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config env  - Manages environment variable configuration for MCP servers</li> </ul>"},{"location":"commands/mcpd_config_env_clear/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_env_list/","title":"config env list","text":""},{"location":"commands/mcpd_config_env_list/#mcpd-config-env-list","title":"mcpd config env list","text":"<p>Lists configured environment variables for a specific MCP server</p>"},{"location":"commands/mcpd_config_env_list/#synopsis","title":"Synopsis","text":"<p>Lists configured environment variables for a specific MCP server, using the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config env list &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_env_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_env_list/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config env  - Manages environment variable configuration for MCP servers</li> </ul>"},{"location":"commands/mcpd_config_env_list/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_env_remove/","title":"config env remove","text":""},{"location":"commands/mcpd_config_env_remove/#mcpd-config-env-remove","title":"mcpd config env remove","text":"<p>Remove environment variables for an MCP server</p>"},{"location":"commands/mcpd_config_env_remove/#synopsis","title":"Synopsis","text":"<p>Remove environment variables for a specified MCP server in the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config env remove &lt;server-name&gt; KEY [KEY ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_env_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_env_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config env  - Manages environment variable configuration for MCP servers</li> </ul>"},{"location":"commands/mcpd_config_env_remove/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_env_set/","title":"config env set","text":""},{"location":"commands/mcpd_config_env_set/#mcpd-config-env-set","title":"mcpd config env set","text":"<p>Set or update environment variables for an MCP server</p>"},{"location":"commands/mcpd_config_env_set/#synopsis","title":"Synopsis","text":"<p>Set or update environment variables for a specified MCP server in the runtime context configuration file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>)</p> <pre><code>mcpd config env set &lt;server-name&gt; KEY=VALUE [KEY=VALUE ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_env_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_env_set/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config env  - Manages environment variable configuration for MCP servers</li> </ul>"},{"location":"commands/mcpd_config_env_set/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_export/","title":"config export","text":""},{"location":"commands/mcpd_config_export/#mcpd-config-export","title":"mcpd config export","text":"<p>Exports current configuration, generating a pair of safe and portable configuration files</p>"},{"location":"commands/mcpd_config_export/#synopsis","title":"Synopsis","text":"<p>Exports current configuration, generating a pair of safe and portable configuration files.</p> <p>Using a project's required configuration (e.g. <code>.mcpd.toml</code>) and the locally configured runtime values from the execution context file (e.g. <code>~/.config/mcpd/secrets.dev.toml</code>), the export command outputs two files:</p> <p>Environment Contract:</p> <p>Lists all required and configured environment variables as secure, namespaced placeholders:</p> <p><code>MCPD__{SERVER_NAME}__{VAR_NAME}</code> - Creates placeholders for both environment variables and command line arguments to be populated with env vars</p> <p>This file is intended for the platform operator or CI/CD system</p> <p>Portable Execution Context:</p> <ul> <li>A new secrets <code>.toml</code> file that defines sanitized runtime args and env sections for each server using the placeholders aligned with the environment contract</li> <li>These files are safe to check into version control if required.</li> </ul> <p>This allows running an mcpd project in any environment, cleanly separating the configuration structure from the secret values</p> <pre><code>mcpd config export [flags]\n</code></pre>"},{"location":"commands/mcpd_config_export/#options","title":"Options","text":"<pre><code>      --context-output string    Optional, specify the output path for the templated execution context config file (default \"secrets.prod.toml\")\n      --contract-output string   Optional, specify the output path for the templated environment file (default \".env\")\n      --format format            Specify the format of the contract output file (one of: dotenv) (default dotenv)\n</code></pre>"},{"location":"commands/mcpd_config_export/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_export/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config  - Manages configuration for MCP servers</li> </ul>"},{"location":"commands/mcpd_config_export/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_tools/","title":"config tools","text":""},{"location":"commands/mcpd_config_tools/#mcpd-config-tools","title":"mcpd config tools","text":"<p>Manages tools configuration for a registered MCP server</p>"},{"location":"commands/mcpd_config_tools/#synopsis","title":"Synopsis","text":"<p>Manages tools configuration for a registered MCP server, dealing with setting, removing, and listing tools</p>"},{"location":"commands/mcpd_config_tools/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_tools/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config  - Manages configuration for MCP servers</li> <li>mcpd config tools list    - Lists the configured (allowed) tools for a specific MCP server</li> <li>mcpd config tools remove    - Remove allowed-listed tools for an MCP server from configuration</li> <li>mcpd config tools set  - Add allowed tools to an MCP server configuration</li> </ul>"},{"location":"commands/mcpd_config_tools/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_tools_list/","title":"config tools list","text":""},{"location":"commands/mcpd_config_tools_list/#mcpd-config-tools-list","title":"mcpd config tools list","text":"<p>Lists the configured (allowed) tools for a specific MCP server</p>"},{"location":"commands/mcpd_config_tools_list/#synopsis","title":"Synopsis","text":"<p>Lists the configured (allowed) tools for a specific MCP server from the .mcpd.toml configuration file</p> <pre><code>mcpd config tools list &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_config_tools_list/#options","title":"Options","text":"<pre><code>      --all                List all available tools from the registry instead of only allowed tools in config file (supports caching flags)\n      --cache-dir string   Directory for caching registry manifests (default \"/home/runner/.cache/mcpd/registries\")\n      --cache-ttl string   Time-to-live for cached registry manifests (e.g. 1h, 30m, 24h) (default \"24h\")\n      --format format      Specify the output format (one of: json, text, yaml) (default text)\n      --no-cache           Disable registry manifest caching\n      --refresh-cache      Force refresh of cached registry manifests\n</code></pre>"},{"location":"commands/mcpd_config_tools_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_tools_list/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config tools  - Manages tools configuration for a registered MCP server</li> </ul>"},{"location":"commands/mcpd_config_tools_list/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_tools_remove/","title":"config tools remove","text":""},{"location":"commands/mcpd_config_tools_remove/#mcpd-config-tools-remove","title":"mcpd config tools remove","text":"<p>Remove allowed-listed tools for an MCP server from configuration</p>"},{"location":"commands/mcpd_config_tools_remove/#synopsis","title":"Synopsis","text":"<p>Remove allowed-listed tools for an MCP server from configuration, if the specified tools are present in config they will be removed</p> <pre><code>mcpd config tools remove &lt;server-name&gt; TOOL [TOOL ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_tools_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_tools_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config tools  - Manages tools configuration for a registered MCP server</li> </ul>"},{"location":"commands/mcpd_config_tools_remove/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_config_tools_set/","title":"config tools set","text":""},{"location":"commands/mcpd_config_tools_set/#mcpd-config-tools-set","title":"mcpd config tools set","text":"<p>Add allowed tools to an MCP server configuration</p>"},{"location":"commands/mcpd_config_tools_set/#synopsis","title":"Synopsis","text":"<p>Add allowed tools to an MCP server configuration. Tools are added to the existing set of tools (append behavior). Duplicate tools are automatically deduplicated. Only tools that are available for the server (as defined in the registry) can be added.</p> <pre><code>mcpd config tools set &lt;server-name&gt; --tool &lt;tool1&gt; [--tool &lt;tool2&gt; ...] [flags]\n</code></pre>"},{"location":"commands/mcpd_config_tools_set/#options","title":"Options","text":"<pre><code>      --cache-dir string   Directory for caching registry manifests (default \"/home/runner/.cache/mcpd/registries\")\n      --cache-ttl string   Time-to-live for cached registry manifests (e.g. 1h, 30m, 24h) (default \"24h\")\n      --no-cache           Disable registry manifest caching\n      --refresh-cache      Force refresh of cached registry manifests\n      --tool stringArray   Tool to add to the server's allowed list (can be repeated)\n</code></pre>"},{"location":"commands/mcpd_config_tools_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_config_tools_set/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd config tools  - Manages tools configuration for a registered MCP server</li> </ul>"},{"location":"commands/mcpd_config_tools_set/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_daemon/","title":"daemon","text":""},{"location":"commands/mcpd_daemon/#mcpd-daemon","title":"mcpd daemon","text":"<p>Launches an <code>mcpd</code> daemon instance</p>"},{"location":"commands/mcpd_daemon/#synopsis","title":"Synopsis","text":"<p>Launches an <code>mcpd</code> daemon instance, which starts MCP servers and provides routing via HTTP API</p> <pre><code>mcpd daemon [--dev] [--addr] [--cors-enable] [--cors-origin]... [flags]\n</code></pre>"},{"location":"commands/mcpd_daemon/#options","title":"Options","text":"<pre><code>      --addr string                   Address for the daemon to bind (not applicable in --dev mode) (default \"0.0.0.0:8090\")\n      --cors-allow-credentials        Allow credentials in CORS requests\n      --cors-allow-header strings     Allowed CORS request header (can be repeated) (default [Accept,Accept-Language,Content-Language,Content-Type,Range])\n      --cors-allow-method strings     Allowed CORS request method, e.g. 'GET' (can be repeated) (default [GET,POST,PUT,DELETE,OPTIONS])\n      --cors-allow-origin strings     Allowed CORS origin (can be repeated)\n      --cors-enable                   Enable Cross-Origin Resource Sharing (CORS) for browser clients.\n      --cors-expose-header strings    CORS response headers that should be made available to scripts in the browser (can be repeated)\n      --cors-max-age string           CORS preflight max age (e.g., '5m', '300s') (default \"5m0s\")\n      --dev                           Run the daemon in development-focused mode\n      --interval-mcp-health string    Time interval in seconds to wait between MCP server health check attempts (e.g. 5s, 10s) (default \"10s\")\n      --timeout-api-shutdown string   Timeout in seconds to wait for graceful API server shutdown (e.g. 5s, 10s) (default \"5s\")\n      --timeout-mcp-health string     Timeout in seconds to wait for completion of MCP server health checks (e.g. 5s, 10s) (default \"3s\")\n      --timeout-mcp-init string       Timeout in seconds to wait per MCP server for initialization (e.g. 5s, 10s) (default \"30s\")\n      --timeout-mcp-shutdown string   Timeout in seconds to wait for shutdown of MCP servers (e.g. 5s, 10s) (default \"5s\")\n</code></pre>"},{"location":"commands/mcpd_daemon/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_daemon/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_daemon/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_init/","title":"init","text":""},{"location":"commands/mcpd_init/#mcpd-init","title":"mcpd init","text":"<p>Initializes the current directory as an <code>mcpd</code> project</p>"},{"location":"commands/mcpd_init/#synopsis","title":"Synopsis","text":"<p>Initializes the current directory as an <code>mcpd</code> project, creating a .mcpd.toml configuration file.</p> <p>This command sets up the basic structure required for an <code>mcpd</code> project.</p> <p>The configuration file path can be overridden using the <code>--config-file</code> flag or the <code>MCPD_CONFIG_FILE</code> environment variable</p> <pre><code>mcpd init [flags]\n</code></pre>"},{"location":"commands/mcpd_init/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_init/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_init/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_inspector/","title":"inspector","text":""},{"location":"commands/mcpd_inspector/#mcpd-inspector","title":"mcpd inspector","text":"<p>Start the MCP inspector tool</p>"},{"location":"commands/mcpd_inspector/#synopsis","title":"Synopsis","text":"<p>Start the MCP inspector tool via npx for quickly testing MCP servers. Optionally pass your desired command and arguments to the inspector. Note that the latest version of the inspector package is used (@modelcontextprotocol/inspector@latest). For more information, see https://modelcontextprotocol.io/docs/tools/inspector.</p> <pre><code>mcpd inspector [command] [args] [flags]\n</code></pre>"},{"location":"commands/mcpd_inspector/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_inspector/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_inspector/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_remove/","title":"remove","text":""},{"location":"commands/mcpd_remove/#mcpd-remove","title":"mcpd remove","text":"<p>Removes an MCP server dependency from the project</p>"},{"location":"commands/mcpd_remove/#synopsis","title":"Synopsis","text":"<p>Removes an MCP server dependency from the project</p> <pre><code>mcpd remove &lt;server-name&gt; [flags]\n</code></pre>"},{"location":"commands/mcpd_remove/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_remove/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_remove/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""},{"location":"commands/mcpd_search/","title":"search","text":""},{"location":"commands/mcpd_search/#mcpd-search","title":"mcpd search","text":"<p>Searches all configured registries for matching MCP servers</p>"},{"location":"commands/mcpd_search/#synopsis","title":"Synopsis","text":"<p>Searches all configured registries for matching MCP servers, when name is not specified, the wildcard character (<code>*</code>) is used. Returns aggregated results from all configured registries</p> <pre><code>mcpd search [server-name] [flags]\n</code></pre>"},{"location":"commands/mcpd_search/#options","title":"Options","text":"<pre><code>      --cache-dir string       Directory for caching registry manifests (default \"/home/runner/.cache/mcpd/registries\")\n      --cache-ttl string       Time-to-live for cached registry manifests (e.g. 1h, 30m, 24h) (default \"24h\")\n      --category stringArray   Optional, specify a partial match for required categories (can be repeated)\n      --format format          Specify the output format (one of: json, text, yaml) (default text)\n      --license string         Optional, specify a partial match for the license of the server (e.g. MIT, Apache)\n      --no-cache               Disable registry manifest caching\n      --official               Optional, only official server packages are included in results\n      --refresh-cache          Force refresh of cached registry manifests\n      --runtime string         Optional, specify the runtime of the server (e.g. uvx, npx)\n      --source string          Optional, specify the source registry of the server (e.g. mozilla-ai)\n      --tag stringArray        Optional, specify a partial match for required tags (can be repeated)\n      --tool stringArray       Optional, specifies the tools the server must expose (can be repeated)\n      --version string         Optional, specify the version of the server\n</code></pre>"},{"location":"commands/mcpd_search/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --config-file string    path to config file (default \".mcpd.toml\")\n      --log-level string      log level for mcpd logs (default \"info\")\n      --log-path string       log file path to use for log output\n      --runtime-file string   path to runtime (execution context) file that contains env vars, and arguments for your MCP servers (default \"/home/runner/.config/mcpd/secrets.dev.toml\")\n</code></pre>"},{"location":"commands/mcpd_search/#see-also","title":"SEE ALSO","text":"<ul> <li>mcpd    - <code>mcpd</code> CLI is the primary interface for developers to interact with, and configure <code>mcpd</code></li> </ul>"},{"location":"commands/mcpd_search/#auto-generated-by-spf13cobra-on-22-oct-2025","title":"Auto generated by spf13/cobra on 22-Oct-2025","text":""}]}